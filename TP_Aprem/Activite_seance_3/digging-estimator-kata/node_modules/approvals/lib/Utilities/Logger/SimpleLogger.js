"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleLogger = void 0;
const Wrapper_1 = require("./Wrapper");
const LoggingInstance_1 = require("./LoggingInstance");
class SimpleLogger {
    static showQueries(show) {
        this._wrapper.get().showQueries(show);
    }
    static showMarkers(show) {
        this._wrapper.get().showMarkers(show);
    }
    static showEvents(show) {
        this._wrapper.get().showEvents(show);
    }
    static showMessages(show) {
        this._wrapper.get().showMessages(show);
    }
    static showVariables(show) {
        this._wrapper.get().showVariables(show);
    }
    static showHourglass(show) {
        this._wrapper.get().showHourglass(show);
    }
    static registerLogger(log_method) {
        this._wrapper.get().logger = log_method;
    }
    static logToString() {
        this._wrapper = new Wrapper_1.SingleWrapper(new LoggingInstance_1.LoggingInstance());
        return SimpleLogger._wrapper.get().logToString();
    }
    static useMarkers(code, parameters = "", logReturnValue = false) {
        return this._wrapper.get().useMarkers(1, code, parameters, logReturnValue);
    }
    static variable(name, value, show_types = false) {
        SimpleLogger._wrapper.get().variable(name, value, show_types);
    }
    static hourglass() {
        this._wrapper.get().hourglass();
    }
    static showAll(show) {
        this._wrapper.get().showAll(show);
    }
    static event(text) {
        this._wrapper.get().event(text);
    }
    static query(queryText) {
        this._wrapper.get().query(queryText);
    }
    static message(messageText) {
        this._wrapper.get().message(messageText);
    }
    static warning(exception) {
        this._wrapper.get().warning(exception);
    }
    static showTimestamps(show) {
        this._wrapper.get().showTimestamps(show);
    }
}
exports.SimpleLogger = SimpleLogger;
SimpleLogger._wrapper = new Wrapper_1.SingleWrapper(new LoggingInstance_1.LoggingInstance());

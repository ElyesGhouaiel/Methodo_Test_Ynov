"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scrubbers = void 0;
const DateScrubber_1 = require("./DateScrubber");
function _replaceRegex(text, regex, replacement) {
    const capturedGuids = [];
    const result = text.replace(regex, match => {
        if (capturedGuids.indexOf(match) < 0) {
            capturedGuids.push(match);
        }
        const index = capturedGuids.indexOf(match) + 1;
        return replacement(index);
    });
    return result;
}
class Scrubbers {
    static createReqexScrubber(regex, replacement) {
        if (typeof replacement === 'function') {
            return t => _replaceRegex(t, regex, replacement);
        }
        else {
            const replacementString = replacement;
            return t => _replaceRegex(t, regex, s => replacementString);
        }
    }
    static createGuidScrubber() {
        const guidReqex = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/ig;
        return this.createReqexScrubber(guidReqex, t => `<guid_${t}>`);
    }
}
exports.Scrubbers = Scrubbers;
/**
 * This method exists as a convenient way to get an example scrubber for you to use.
 * To use this template, simply inline the method in your IDE.
 */
Scrubbers.templates = class {
    static regexScrubberWithLambda() {
        return Scrubbers.createReqexScrubber(/your pattern here: [a-zA-Z]+d{4}/ig, t => `<your replacement_${t}>`);
    }
    static regexScrubber() {
        return Scrubbers.createReqexScrubber(/your pattern here: [a-zA-Z]+d{4}/ig, `<your replacement>`);
    }
    static dateScrubber() {
        return DateScrubber_1.DataScrubber.getScrubberFor("2014/05/13 16:30:59.786");
    }
};
